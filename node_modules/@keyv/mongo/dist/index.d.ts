/// <reference types="node" />
import EventEmitter from 'events';
import { type ClearExpiredOutput, type ClearOutput, type ClearUnusedForOutput, type DeleteManyOutput, type DeleteOutput, type GetManyOutput, type GetOutput, type HasOutput, type KeyvMongoConnect, type KeyvMongoOptions, type Options, type SetOutput } from './types';
declare class KeyvMongo<Value = any> extends EventEmitter {
    ttlSupport: boolean;
    opts: Options;
    connect: Promise<KeyvMongoConnect>;
    namespace?: string;
    constructor(url?: KeyvMongoOptions, options?: Options);
    get(key: string): GetOutput<Value>;
    getMany(keys: string[]): GetManyOutput<Value>;
    set(key: string, value: Value, ttl?: number): SetOutput;
    delete(key: string): DeleteOutput;
    deleteMany(keys: string[]): DeleteManyOutput;
    clear(): ClearOutput;
    clearExpired(): ClearExpiredOutput;
    clearUnusedFor(seconds: number): ClearUnusedForOutput;
    iterator(namespace?: string): AsyncGenerator<any[], void, undefined>;
    has(key: string): HasOutput;
}
export = KeyvMongo;
