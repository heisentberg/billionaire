import * as f from './types/files';
import * as a from './types/assistants';
import * as t from './types';
import * as s from './schemas';
export declare function getConversations(pageNumber: string): Promise<t.TGetConversationsResponse>;
export declare function abortRequestWithMessage(endpoint: string, abortKey: string, message: string): Promise<void>;
export declare function deleteConversation(payload: t.TDeleteConversationRequest): Promise<any>;
export declare function clearAllConversations(): Promise<unknown>;
export declare function revokeUserKey(name: string): Promise<unknown>;
export declare function revokeAllUserKeys(): Promise<unknown>;
export declare function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]>;
export declare function getConversationById(id: string): Promise<s.TConversation>;
export declare function updateConversation(payload: t.TUpdateConversationRequest): Promise<t.TUpdateConversationResponse>;
export declare function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown>;
export declare function updateUserKey(payload: t.TUpdateUserKeyRequest): Promise<any>;
export declare function getPresets(): Promise<s.TPreset[]>;
export declare function createPreset(payload: s.TPreset): Promise<s.TPreset[]>;
export declare function updatePreset(payload: s.TPreset): Promise<s.TPreset[]>;
export declare function deletePreset(arg: s.TPreset | object): Promise<s.TPreset[]>;
export declare function getSearchEnabled(): Promise<boolean>;
export declare function getUser(): Promise<t.TUser>;
export declare function getUserBalance(): Promise<string>;
export declare const searchConversations: (q: string, pageNumber: string) => Promise<t.TSearchResults>;
export declare const getAIEndpoints: () => Promise<t.TEndpointsConfig>;
export declare const getModels: () => Promise<t.TModelsConfig>;
export declare const updateTokenCount: (text: string) => Promise<any>;
export declare const login: (payload: t.TLoginUser) => Promise<any>;
export declare const logout: () => Promise<any>;
export declare const register: (payload: t.TRegisterUser) => Promise<any>;
export declare const userKeyQuery: (name: string) => Promise<t.TCheckUserKeyResponse>;
export declare const getLoginGoogle: () => Promise<unknown>;
export declare const requestPasswordReset: (payload: t.TRequestPasswordReset) => Promise<t.TRequestPasswordResetResponse>;
export declare const resetPassword: (payload: t.TResetPassword) => Promise<any>;
export declare const getAvailablePlugins: () => Promise<s.TPlugin[]>;
export declare const updateUserPlugins: (payload: t.TUpdateUserPlugins) => Promise<any>;
export declare const getStartupConfig: () => Promise<t.TStartupConfig>;
export declare const createAssistant: (data: a.AssistantCreateParams) => Promise<a.Assistant>;
export declare const getAssistantById: (assistant_id: string) => Promise<a.Assistant>;
export declare const updateAssistant: (assistant_id: string, data: a.AssistantUpdateParams) => Promise<a.Assistant>;
export declare const deleteAssistant: (assistant_id: string) => Promise<void>;
export declare const listAssistants: (params?: a.AssistantListParams) => Promise<a.AssistantListResponse>;
export declare const uploadImage: (data: FormData) => Promise<f.FileUploadResponse>;
export declare const deleteFiles: (files: f.BatchFile[]) => Promise<f.DeleteFilesResponse>;
